% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/abundance.R
\name{pop.change}
\alias{pop.change}
\title{Finds abundance, basal area, or agb in two censuses and the rate of...}
\usage{
pop.change(census1, census2, type = "abund", dbhunit = "mm",
  alivecode = c("A"), mindbh = NULL, split1 = NULL, split2 = NULL)
}
\arguments{
\item{N.1}{(or BA.1 or AGB.1) an array of abundance (or basal area or agb) in the first census; one dimension of the array for split1, the second for split2}

\item{N.2}{(or BA.2 or AGB.2) abundance (or basal area  or agb) in the second census in a matching array}

\item{date1}{mean date of first census in a matching array}

\item{date2}{mean date of second census in a matching array}

\item{interval}{the time interval in years in a matching array}

\item{little.r}{the rate of population change in a matching array, (log(N2)-log(N1))/time

This list can be submitted to assemble.demography (topic utilitiesCTFS) to convert into a convenient table.

See abundance()}
}
\description{
Finds abundance, basal area, or agb in two censuses and the rate of change between them.

Accepts two dataframes, each an R Analytical Table for one census, the earlier census first.

Do not use this function with diameter categories as a split variable! The results won't make sense.

The categories need to be permanent attributes, such as species, genus, quadrat. Use instead pop.change.dbh to
find population change of dbh categories.

Mean census date for a species is not the mean
census date for all living individuals in that census, but the mean census
date for all individuals alive in either census. Plants recruited between the two censuses get a first census date equal to
the date on which the quadrat they later appear in was censused in the first
census. Plants dead in the second census get a census date equal to the date on which their quadrat was censused

The return value is a list of 6 components:
}
\examples{
\dontrun{
bcichange=pop.change(bci.full5,bci.full6,type='abund',split1=bci.full5$sp,mindbh=10)
str(bcichange)
head(bcichange$N.1)
change.table=assemble.demography(bcichange,type='a')
head(change.table)}



}
